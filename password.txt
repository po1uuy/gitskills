//2023.12.19

package gitee;
import java.util.Scanner;
public class week3 {

	   public static void main(String[] args) {

		        Scanner scanner = new Scanner(System.in);
		        System.out.println("1. 加密功能");
		        System.out.println("2. 解密功能");
		        System.out.println("3. 判断密码强度");
		        System.out.println("4. 密码生成");
		        System.out.print("请选择功能（输入1-4）：");
		        int choice = scanner.nextInt();

		        switch (choice) {
		            case 1:
		                System.out.print("请输入要加密的密码：");
		                String plainPassword = scanner.next();
		                String encryptedPassword = encryptPassword(plainPassword);
		                System.out.println("加密后的密码：" + encryptedPassword);
		                break;
		            case 2:
		                System.out.print("请输入要解密的密码：");
		                String encryptedPassword2 = scanner.next();
		                String decryptedPassword = decryptPassword(encryptedPassword2);
		                System.out.println("解密后的密码：" + decryptedPassword);
		                break;
		            case 3:
		                System.out.print("请输入要判断强度的密码：");
		                String password = scanner.next();
		                String passwordStrength = checkPasswordStrength(password);
		                System.out.println("密码强度：" + passwordStrength);
		                break;
		            case 4:
		                System.out.print("请输入要生成密码的长度：");
		                int length = scanner.nextInt();
		                String generatedPassword = generatePassword(length);
		                System.out.println("生成的密码：" + generatedPassword);
		                break;
		            default:
		                System.out.println("无效的选择！");
		                break;
		        }

		        scanner.close();
		    }

		    // 加密密码
		    public static String encryptPassword(String password) {
		        StringBuilder encryptedPassword = new StringBuilder();
		        int offset = 3;

		        for (int i = 0; i < password.length(); i++) {
		            char c = password.charAt(i);
		            int ascii = (int) c;
		            ascii += i + 1 + offset;
		            encryptedPassword.append((char) ascii);
		        }

		        // 调换第一位和最后一位
		        if (encryptedPassword.length() > 1) {
		            char firstChar = encryptedPassword.charAt(0);
		            char lastChar = encryptedPassword.charAt(encryptedPassword.length() - 1);
		            encryptedPassword.setCharAt(0, lastChar);
		            encryptedPassword.setCharAt(encryptedPassword.length() - 1, firstChar);
		        }

		        // 反转字符串
		        encryptedPassword.reverse();

		        return encryptedPassword.toString();
		    }

		    // 解密密码
		    public static String decryptPassword(String encryptedPassword) {
		        StringBuilder decryptedPassword = new StringBuilder(encryptedPassword).reverse();

		        // 调换第一位和最后一位
		        if (decryptedPassword.length() > 1) {
		            char firstChar = decryptedPassword.charAt(0);
		            char lastChar = decryptedPassword.charAt(decryptedPassword.length() - 1);
		            decryptedPassword.setCharAt(0, lastChar);
		            decryptedPassword.setCharAt(decryptedPassword.length() - 1, firstChar);
		        }

		        int offset = 3;

		        for (int i = 0; i < decryptedPassword.length(); i++) {
		            char c = decryptedPassword.charAt(i);
		            int ascii = (int) c;
		            ascii -= i + 1 + offset;
		            decryptedPassword.setCharAt(i, (char) ascii);
		        }

		        return decryptedPassword.toString();
		    }

		    // 判断密码强度
		    public static String checkPasswordStrength(String password) {
		        int length = password.length();
		        boolean hasDigit = false;
		        boolean hasLowerCase = false;
		        boolean hasUpperCase = false;

		        for (int i = 0; i < length; i++) {
		            char c = password.charAt(i);
		            if (Character.isDigit(c)) {
		                hasDigit = true;
		            } else if (Character.isLowerCase(c)) {
		                hasLowerCase = true;
		            } else if (Character.isUpperCase(c)) {
		                hasUpperCase = true;
		            }
		        }

		        if (length < 8 || (length >= 8 && !hasDigit && !hasLowerCase && !hasUpperCase)) {
		            return "弱强度";
		        } else if (length >= 8 && hasDigit && (hasLowerCase || hasUpperCase)) {
		            return "中强度";
		        } else if (length >= 8 && hasDigit && hasLowerCase && hasUpperCase) {
		            return "高强度";
		        } else {
		            return "未知强度";
		        }
		    }

		    // 生成密码
		    public static String generatePassword(int length) {
		        StringBuilder generatedPassword = new StringBuilder();

		        for (int i = 0; i < length; i++) {
		            int randomType = (int) (Math.random() * 3);
		            char randomChar;

		            switch (randomType) {
		                case 0:
		                    randomChar = (char) (48 + (int) (Math.random() * 10)); // 数字
		                    break;
		                case 1:
		                    randomChar = (char) (65 + (int) (Math.random() * 26)); // 大写字母
		                    break;
		                case 2:
		                    randomChar = (char) (97 + (int) (Math.random() * 26)); // 小写字母
		                    break;
		                default:
		                    randomChar = ' ';
		                    break;
		            }

		            generatedPassword.append(randomChar);
		        }

		        return generatedPassword.toString();
		    }
	}

